#include <iostream>
using namespace std;
class Node{
public:
    int data;
    Node * next;
    Node(){
        data = 0;
        next = NULL;
    }   
    Node(int d){
        data = d;
        next = NULL;
    }
};
class Queue{
    Node *front;
    Node *rear;
public:
    Queue(){
        front = NULL;
        rear = NULL;
    }
    bool isEmpty(){
        if(front == NULL && rear == NULL){
            return true;
        }
        else{
            return false;
        }
    }
    void enqueue(Node *n){
        if (isEmpty())
        {
            front = n;
            rear = n;
        }
        else
        {
            rear->next=n;
            rear=n;
        }
    }
    void dequeue(){
        Node *temp=NULL;
        if (isEmpty()) 
        {
            cout << "Queue is Empty" << endl;
            return;
        } 
        else if(front==rear)
        {
            temp = front;
            front = NULL;
            rear = NULL;  
            delete temp;
        }
        else
        {
            temp=front;
            front = front->next;  
            delete temp;
        }
    }
    int count(){
        int count=0;
        Node *temp=front;
        while(temp!=NULL)
        {
            count++;
            temp=temp->next;
        }
        return count;
    }  
    void display(){
        if(isEmpty()){
            cout << "Queue is Empty" << endl;
        }
        else
        {
            Node *temp=front;
            while(temp!=NULL)
            {
                cout<< temp->data <<" ";
                temp=temp->next;
            }
        cout<<endl;
        }
    }
};
int main() {
    Queue q;
    for (int i = 1; i <= 3; i++)
    {
        Node * new_node = new Node;
        new_node->data = i;
        q.enqueue(new_node);
    }
    q.display();
    q.dequeue();
    q.display();
    q.count();
    return 0;
}
